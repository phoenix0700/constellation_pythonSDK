name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual trigger

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock pytest-asyncio

    - name: Install package in development mode
      run: |
        pip install -e .

    - name: Verify CLI installation
      run: |
        constellation --help
        constellation config show

    - name: Run unit tests
      run: |
        pytest tests/ -v --tb=short --maxfail=5

    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=constellation_sdk --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-integration:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.11"]
        network: ["testnet", "integrationnet"]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-mock pytest-asyncio
        pip install -e .

    - name: Run integration tests
      env:
        TEST_NETWORK: ${{ matrix.network }}
      run: |
        pytest tests/ -v -m "integration" --tb=short
      continue-on-error: true  # Integration tests may fail due to network issues

  test-async:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.11"]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio
        pip install -e .

    - name: Test async functionality
      run: |
        python -c "
        import asyncio
        from constellation_sdk import AsyncNetwork, ASYNC_AVAILABLE
        
        print(f'Async available: {ASYNC_AVAILABLE}')
        
        if ASYNC_AVAILABLE:
            async def test():
                async with AsyncNetwork() as client:
                    info = await client.get_node_info()
                    print('Async test passed')
            
            asyncio.run(test())
        else:
            print('Async not available - skipping')
        "

  test-cli:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies and package
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .

    - name: Test CLI commands
      run: |
        # Test CLI help
        constellation --help
        
        # Test account creation
        constellation account create --save-key
        
        # Test configuration
        constellation config show
        constellation config set test_value "test"
        constellation config show
        
        # Test network info (may fail due to network connectivity)
        constellation network health || true
        
        # Test metagraph discovery (may fail due to network connectivity)
        constellation metagraph discover || true

  test-docs:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .

    - name: Test examples
      run: |
        # Test that examples can be imported without errors
        python -c "
        import sys
        sys.path.append('examples')
        
        # Test basic usage example
        try:
            import basic_usage
            print('Basic usage example: OK')
        except Exception as e:
            print(f'Basic usage example failed: {e}')
        
        # Test offline usage example  
        try:
            import offline_usage
            print('Offline usage example: OK')
        except Exception as e:
            print(f'Offline usage example failed: {e}')
        "

    - name: Validate README examples
      run: |
        # Check that README code examples are syntactically correct
        python -c "
        import re
        
        with open('README.md', 'r') as f:
            content = f.read()
        
        # Extract Python code blocks
        code_blocks = re.findall(r'```python(.*?)```', content, re.DOTALL)
        
        for i, code in enumerate(code_blocks):
            try:
                compile(code.strip(), f'README_example_{i}', 'exec')
                print(f'README example {i}: Syntax OK')
            except SyntaxError as e:
                print(f'README example {i}: Syntax Error - {e}')
                exit(1)
        
        print('All README examples passed syntax check')
        "

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Check for known security vulnerabilities
      run: |
        safety check -r requirements.txt --output text

    - name: Run security linter
      run: |
        bandit -r constellation_sdk/ -f json -o bandit-report.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json 