name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-lint-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-lint-

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy pylint

    - name: Install package dependencies
      run: |
        pip install -r requirements.txt

    - name: Run flake8
      run: |
        flake8 constellation_sdk/ tests/ examples/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 constellation_sdk/ tests/ examples/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff constellation_sdk/ tests/ examples/

    - name: Check code formatting with black
      run: |
        black --check --diff constellation_sdk/ tests/ examples/

    - name: Run mypy type checking
      run: |
        mypy constellation_sdk/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true  # Type hints may not be complete

    - name: Run pylint
      run: |
        pylint constellation_sdk/ --exit-zero --output-format=text --reports=no --score=yes
      continue-on-error: true  # Pylint can be very strict

  format-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install formatting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort

    - name: Check formatting with black
      run: |
        black --check constellation_sdk/ tests/ examples/

    - name: Check import sorting with isort
      run: |
        isort --check-only constellation_sdk/ tests/ examples/

  complexity-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install analysis tools
      run: |
        python -m pip install --upgrade pip
        pip install radon xenon

    - name: Check cyclomatic complexity
      run: |
        radon cc constellation_sdk/ -a -nb
        radon mi constellation_sdk/ -nb

    - name: Check complexity with xenon
      run: |
        xenon --max-average A --max-modules B --max-absolute B constellation_sdk/
      continue-on-error: true

  documentation-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install documentation tools
      run: |
        python -m pip install --upgrade pip
        pip install pydocstyle docformatter

    - name: Check docstring style
      run: |
        pydocstyle constellation_sdk/ --count --explain --source
      continue-on-error: true

    - name: Check docstring formatting
      run: |
        docformatter --check --diff constellation_sdk/
      continue-on-error: true

  dependency-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependency tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit pipdeptree

    - name: Audit dependencies for vulnerabilities
      run: |
        pip-audit -r requirements.txt --output=json --output-file=audit-report.json
      continue-on-error: true

    - name: Check dependency tree
      run: |
        pip install -r requirements.txt
        pipdeptree --warn silence

    - name: Upload audit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-audit
        path: audit-report.json

  commit-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check commit messages
      run: |
        # Get commit messages from PR
        git log --format="%s" origin/main..HEAD | while read -r commit_msg; do
          # Check if commit message follows conventional format (optional)
          if [[ ! "$commit_msg" =~ ^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .+ ]]; then
            echo "⚠️  Commit message doesn't follow conventional format: $commit_msg"
          else
            echo "✅ Good commit message: $commit_msg"
          fi
        done
      continue-on-error: true

  pre-commit-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install pre-commit
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit

    - name: Cache pre-commit
      uses: actions/cache@v3
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
        restore-keys: |
          pre-commit-

    - name: Create basic pre-commit config
      run: |
        cat > .pre-commit-config.yaml << EOF
        repos:
        -   repo: https://github.com/psf/black
            rev: 23.12.1
            hooks:
            -   id: black
        -   repo: https://github.com/pycqa/isort
            rev: 5.13.2
            hooks:
            -   id: isort
        -   repo: https://github.com/pycqa/flake8
            rev: 7.0.0
            hooks:
            -   id: flake8
        -   repo: https://github.com/pre-commit/pre-commit-hooks
            rev: v4.5.0
            hooks:
            -   id: trailing-whitespace
            -   id: end-of-file-fixer
            -   id: check-yaml
            -   id: check-added-large-files
        EOF

    - name: Run pre-commit
      run: |
        pre-commit run --all-files
      continue-on-error: true 